# Создайте словарь со списком вещей для похода в качестве ключа и их массой в качестве значения.
# Определите какие вещи влезут в рюкзак передав его максимальную грузоподъёмность.
# Достаточно вернуть один допустимый вариант.*Верните все возможные варианты комплектации рюкзака.

# Словарь вещей которые можно взять с собой и их масса
# Словарь с вещами и их массой
items = {
    'палатка': 3.5,
    'спальный мешок': 1.5,
    'питьевая вода': 1.0,
    'еда': 3.0,
    'вода': 4,
    'фонарь': 0.5,
    'аптечка': 0.3,
    'компас': 0.1,
    'лопатка': 1,
    'удочка': 1.2
}

# Максимальная грузоподъемность рюкзака в килограммах
max_weight = 4.0

# Функция для нахождения всех возможных вариантов комплектации рюкзака
def find_combinations(items, max_weight):
    valid_combinations = []
    item_list = list(items.items())

    def backtrack(start, current_combination, current_weight):
        """
        Функция подбора комплекта вещей. Подбор осуществляется методом перебора через рекурсию
        """
        if current_weight <= max_weight:
            valid_combinations.append(current_combination[:])

        # Перебираем оставшиеся вещи
        for i in range(start, len(item_list)):
            item, weight = item_list[i]
            current_combination.append(item)
            backtrack(i + 1, current_combination, current_weight + weight)  # Рекурсивный вызов
            current_combination.pop()  # Убираем последний элемент для следующей итерации

    backtrack(0, [], 0)  # Начинаем с первого элемента
    return valid_combinations

# Находим все допустимые варианты комплектации рюкзака. Заполнение рюкзока осуществлялось недо предела. Перебераются вообще все возможные варианты массой не более max_weight
valid_combinations = find_combinations(items, max_weight)


# Выводим все найденные варианты
for i in range(1, len(valid_combinations)):
    total_weight = sum(items[item] for item in valid_combinations[i])
    print(f"Вариант {i}: {valid_combinations[i]}, общий вес: {total_weight} кг")          
            


